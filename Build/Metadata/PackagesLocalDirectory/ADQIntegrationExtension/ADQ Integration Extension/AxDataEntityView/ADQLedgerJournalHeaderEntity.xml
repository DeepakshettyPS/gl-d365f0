<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ADQLedgerJournalHeaderEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Odata action  for GL Integration ; 
// a.to check GL exists.
// b.delete Errored General Journal Header.
// c.post General Journal.
// d.Error Handling
public class ADQLedgerJournalHeaderEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = LedgerJournalEntityBase::validateJournal(this);

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = LedgerJournalEntityBase::validateJournal(this);

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PostGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post General Journal
    /// </summary>
    [SysODataAction('PostGeneralLedger', false)]
    public static Log PostGeneralLedger(LedgerJournalId _JournalBatchNumber,DataAreaId _DataAreaId)
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        DataAreaId                               DataAreaId = _DataAreaId;
        Log                                      ErrorLog;
        LedgerJournalCheckPost                   JournalPost;

        CompanyInfo CompanyInfo = CompanyInfo::findDataArea(DataAreaId);
        if(!CompanyInfo.recid)
        {
            return strFmt("@ADQ:OdataActionInvalidCompanyValidateError",DataAreaId);
        }

        try
        {
            changecompany(_DataAreaId)
            {
                LedgerJournalTable LedgerJournalTable = LedgerJournalTable::find(_JournalBatchNumber,false);
           
                if(LedgerJournalTable.RecId && LedgerJournalTable.Posted == NoYes::No)
                {
                    JournalPost = LedgerJournalCheckPost::newLedgerJournalTable(LedgerJournalTable, NoYes::Yes,NoYes::No);
                    if(JournalPost && JournalPost.validate())
                    {
                        JournalPost.parmShowErrorOk(true);
                        JournalPost.runOperation();
                    }
                    else
                    {
                        ErrorLog = strFmt('@ADQ:OdataJournalPostingValidateError',_JournalBatchNumber) ;
                        if(JournalPost)
                        {
                            ErrorLog = ErrorLog + "   "  + JournalPost.tableErrorLog();
                        }
                        return ErrorLog ;
                    }

                }
                else if(LedgerJournalTable.RecId && LedgerJournalTable.Posted == NoYes::Yes)
                {
                    return "@ADQ:OdataActionPostedGLPostValidateError";
                }
                else if (!LedgerJournalTable)
                {
                    return  '@ADQ:OdataActionInvalidGLValidateError';
                }
            }
            
         }
        catch (xppEx)
        {
            System.Exception ex = CLRInterop::getLastException();
            ErrorLog = strFmt('@ADQ:OdataJournalPostingValidateError',_JournalBatchNumber) ;
            if(xppEx)
            {
                ErrorLog = ErrorLog + "   " + xppEx.Message;
            }
            if(JournalPost && JournalPost.tableErrorLog())
            {
                ErrorLog = ErrorLog + "   " + JournalPost.tableErrorLog();
            }
            return ErrorLog ;
        }
 
        return ErrorLog !='' ? ErrorLog : strFmt('@ADQ:OdataActionGeneralJournalPosting',_JournalBatchNumber);;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete General Journal Header
    /// </summary>
    [SysODataAction('DeleteJournalHeader', false)]
    public static str DeleteJournalHeader(LedgerJournalId _JournalBatchNumber,DataAreaId _DataAreaId)
    {
        CompanyInfo CompanyInfo = CompanyInfo::findDataArea(_DataAreaId);
        if(!CompanyInfo.recid)
        {
            return strFmt("@ADQ:OdataActionInvalidCompanyValidateError",_DataAreaId);
        }
        changecompany(_DataAreaId)
        {
            LedgerJournalTable LedgerJournalTable = LedgerJournalTable::find(_JournalBatchNumber);
           
            if(LedgerJournalTable.RecId && LedgerJournalTable.Posted == NoYes::No)
            {
                ttsbegin;
                delete_from LedgerJournalTable  
                where LedgerJournalTable.JournalNum == _JournalBatchNumber 
                   && LedgerJournalTable.Posted == NoYes::No ;
                ttscommit; 
            }
            else if(LedgerJournalTable.RecId && LedgerJournalTable.Posted == NoYes::Yes)
            {
                return "@ADQ:OdataActionPostedGLDeleteValidateError";
            }
            else if (!LedgerJournalTable)
            {
                return  '@ADQ:OdataActionInvalidGLValidateError';
            }
        }

        return strFmt('@ADQ:OdataActionGeneralJournalDeleted',_JournalBatchNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check Journal exists
    /// </summary>
    /// 
    [
        SysODataActionAttribute('CheckJournalId', false)
    ]
    public static str CheckJournalId(LedgerJournalId _JournalBatchNumber,DataAreaId _DataAreaId)
    {
        boolean response = false;
        CompanyInfo CompanyInfo = CompanyInfo::findDataArea(_DataAreaId);
        if(!CompanyInfo.recid)
        {
            return strFmt("@ADQ:OdataActionInvalidCompanyValidateError",_DataAreaId);
        }
        changecompany(_DataAreaId)
        {
            LedgerJournalTable LedgerJournalTable = LedgerJournalTable::find(_JournalBatchNumber);
           
            if(LedgerJournalTable)
            {
                response = true;
            }
        }
        
        return (response  
               ? strFmt("@ADQ:OdataInvalidJournalIdValidateError",_JournalBatchNumber)
               : strFmt("@ADQ:OdataJournalIdExistsValidate",_JournalBatchNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // Skip Validation check for JournalBatchNumber on Header added for Odata request of header and line in single Batch request
        this.skipDataSourceValidateField(fieldNum(ADQLedgerJournalHeaderEntity,JournalBatchNumber),true);
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // Skip Validation check for JournalBatchNumber on Header added for Odata request of header and line in single Batch request
        this.skipDataSourceValidateField(fieldNum(ADQLedgerJournalHeaderEntity,JournalBatchNumber),true);
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        // Skip Validation check for JournalBatchNumber on Header added for Odata request of header and line in single Batch request
        this.skipDataSourceValidateField(fieldNum(ADQLedgerJournalHeaderEntity,JournalBatchNumber),true);
        super(_entityCtx);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<FormRef>LedgerJournalTable</FormRef>
	<Label>@SYS55327</Label>
	<Tags>Journal</Tags>
	<EnableSetBasedSqlOperations>No</EnableSetBasedSqlOperations>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>GeneralLedger</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ADQLedgerJournalHeaders</PublicCollectionName>
	<PublicEntityName>ADQLedgerJournalHeader</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingLayer</Name>
			<DataField>CurrentOperationsTax</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalName</Name>
			<DataField>JournalName</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalBatchNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>JournalNum</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsPosted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>Posted</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Name</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalTotalDebit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SYS24011</Label>
			<DataField>JournalTotalDebit</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalTotalCredit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SYS24012</Label>
			<DataField>JournalTotalCredit</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingCurrency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>AccountingCurrency</DataField>
			<DataSource>Ledger</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntegrationKey</Name>
			<DataField>IntegrationKey</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>JournalBatchNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LedgerJournalEntityBase</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalBatchNumber</MapField>
					<MapFieldTo>JournalBatchNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalName</MapField>
					<MapFieldTo>JournalName</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>LegalEntity</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedDataEntity>OMLegalEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>dataAreaId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerJournalTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerJournalTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CompanyInfo</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CompanyInfo</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>Ledger</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>Ledger</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>CompanyInfo</JoinDataSource>
										<RelatedField>PrimaryForLegalEntity</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DataAreaId</Field>
								<JoinDataSource>LedgerJournalTable</JoinDataSource>
								<RelatedField>DataArea</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>JournalType</Name>
						<Field>JournalType</Field>
						<Value>Daily</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>